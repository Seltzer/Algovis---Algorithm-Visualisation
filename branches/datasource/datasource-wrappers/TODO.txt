Currently in progress:

* Analyse dependencies between actions
* Write a mergesort demo (dependent on VectorWrapper::erase being implemented)
* Finish VectorWrapper and write wrappers for STL stacks + maps, and unsigned types


***** CRITICAL *****
* Improve DS_Assigned and DS_HighlightOperands
* Add a proper position allocation algorithm to the Container class.

  
***** HIGH PRIORITY *****

* Add mouse over expand feature
	- We can display 'thumbnail' views of large VOs by default and display the large versions 
		when moused over
	- Names/addresses of Viewables should only be shown when moused over
		(this will speed up painting too)
* Allow user to pause/resume/undo (dependent on ActionBuffer + history)
* Speed up and control painting  


***** MEDIUM PRIORITY *****
* Write a Viewable for matrices
* Write VO_LinkedList and some sort of VO for a map type data structure
* Do some quick research into a popular C++ graph library
* Provide more user functions in userFunctions.h:
		- VO naming (so that VOs aren't just memory addresses/IDs)
		- Combining actions
* UI Stuff:
	 - Some sort of control panel with list of VOs???
	 - Allow users to orient arrays vertically as well as horizontally - could be useful when drawing
		arrays of arrays.
	 - Show action descriptions down the bottom?
	 - Improve window resizing and implement snap to current action feature
* Implement drawing for pointer types and custom user types (possibly dependent on mouseover expand feature)


***** LOW PRIORITY *****

* Port to Linux
* Develop Algovis Python - http://pypi.python.org/pypi/ProxyTypes could be useful
* Explore feasibility of Algovis Java
	What we require is essentially function hooking which is often used for aspect-oriented programming type 
	behaviour. Useful search keywords might include: 
		{hooking hooks aop proxy intercept method calls...}
* Decouple utilities-lib from boost-subset so that it can be used in other projects


***** GENERAL CODE TODO *****

* Possibly start using smart pointers if things get nasty
* Turn algovis c++ into a DLL



***** BEFORE CONFERENCE/PRESENTATION **********
* Compile a demo which uses Algovis in another compiler 
		(to show how easy it is to use Algovis by simply including headers and copying a couple of libs/dlls)
* Test on uni computers
* Write some more demos, test the compatibility of our wrappers against more libraries
		Hopefully we can figure out if there are any other cases when #defining primitives fails


***** BUGS *****
* Ambiguous < op when using vec.size_type
* Shutdown bugs when actions are occurring


**** THOUGHTS ****
* How to deal with "unsigned char"
* Consider string algorithms


