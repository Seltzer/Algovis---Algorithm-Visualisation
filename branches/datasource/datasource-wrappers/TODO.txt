Currently in progress:

* Integrating QT - this will almost certainly change how we handle events
* Fixing the hackery of VO_Array so that it supports elements other than VO_SinglePrintables
* Finishing dsAssigned before our meeting with Dinneen
* Using history to analyse dependencies between actions


***** CRITICAL *****

* Implement some more DSAction subclasses

* Implement action buffer - we can have DEBUG mode with action buffer size = 1 (and displaying tempvars) 
and a GENERAL mode with a larger action buffer
* Work on UI (dependent on QT integration)
	 - Implement a scrollbar widget to be used in the world panel (or outsource to QT maybe???)
	 - Add a position allocation algorithm to the Container class.
	 - Allow VOs to be dragged/suppressed/magnified
	 - Add mouse over expand feature. 
		- We can display 'thumbnail' views of large VOs by default and display the large versions 
			when moused over
		- Consider whether names/addresses of Viewables should only be shown when moused over
	 - Add pause/resume/undo and possibly textual descriptions of actions to the bottom panel
			(depends on history feature)
	 - Magnify feature for VOs??? Low priority
	 - Some sort of control panel with list of VOs??? Low priority
	 - Allow users to orient arrays vertically as well as horizontally - could be useful when drawing
		arrays of arrays. Low priority
  
  
***** HIGH PRIORITY *****

* Highlight operands for comparison operators if user desires
* Finish VectorWrapper
* Write wrappers for STL stacks + maps, and unsigned types
* Consider writing a Viewable for matrices
* Do some quick research into a popular C++ graph library
* Implement drawing for pointer types and custom user types (possibly dependent on mouseover expand feature)
* Write some more demos, test the compatibility of our wrappers against more libraries
		Hopefully we can figure out if there are any other cases when #defining primitives fails



***** MEDIUM PRIORITY *****

* Write VO_LinkedList and some sort of VO for a map type data structure
* Provide more user functions to userFunctions.h:
		- Control whether program debug breaks or pauses after every action (and pause duration)
		- VO naming (so that VOs aren't just memory addresses
		- Combining actions
* Consider string algorithms
* Compile a demo which uses Algovis in another compiler 
		(to show how easy it is to use Algovis by simply including headers and copying a couple of libs/dlls)


***** LOW PRIORITY *****

* Port to Linux
* Develop Algovis Python - http://pypi.python.org/pypi/ProxyTypes could be useful
* Explore feasibility of Algovis Java
	What we require is essentially function hooking which is often used for aspect-oriented programming type 
	behaviour. Useful search keywords might include: 
		{hooking hooks aop proxy intercept method calls...}



***** GENERAL CODE TODO *****

* Possibly start using smart pointers if things get nasty
* Turn algovis c++ into a DLL


***** BUGS *****
* Mysterious slowdowns with the odd DS_Assigned animation


**** THOUGHTS ****
* How to deal with "unsigned char"


