Conventions:

DS = Data Source
VO = Viewable Object


Parameter copy semantics:
	This is a contract defined by some methods to establish ownership rules for parameters. A method
	declared to use these semantics makes copies of its parameters... therefore the method owns these
	copies and the caller owns the originals and is free to dispose of them after the method invocation
	if desired.
	
	Obviously in C++, value types are copied and ref/pointer types are shallow copied without choice, but
	these semantics imply that ref/pointers passed as parameters will also be deep copied.
		
		
		
				
Synchronisation/threading details for performing an action (OBSOLETE NOW)
	- World::PerformDSAction() acquires a write lock on the VOs and ensures that there isn't already 
				a pending action, sets World::voActionPending to true, and calls 
				Displayer::PerformAndAnimateActionAsync() which sets Displayer::actionPending to true.
	- Displayer render thread later notices that the Displayer::actionPending flag is checked and begins
				the animation. Displayer::RenderLoop acquires a write lock on the VOs for each frame but
				that technically isn't necessary since nothing can acquire any lock on the VOs while
				there's an update pending anyway (see note below)
	- When animation finishes, Displayer invokes World::CompleteDSAction which is a callback method. This
				results in World::voActionPendingCondVar.notify_all() to let any waiting threads know that 
				the action has finished (chances are that another thread is waiting on this inside
				World::PerformDSAction())
				
A key point to note is that nothing can acquire even a read lock on the VOs while there is an action pending.
So from the point of PerformDSAction() being called to the animation happening to the Displayer actually 
applying the action and calling back the World, nothing can acquire a read lock.

We may change this in the future if, for example, we have multiple views which require more frequent read
access and can't afford to wait for an animation to finish.
				
		
		
Intended drawing sequence (OBSOLETE)
	1.) Let animation manipulate VOs - this may result in the triggering of events when VOs are resized etc.
	2.) For all panels:
			a.) Draw panel
			b.) Draw panel contents - in the case of World panel, draw all Viewables
					which aren't involved in a pending animation.
	3.) Draw next animation frame
	4.) Draw mouse popups

		
		
Results from testing shared_mutex behaviour using a single thread:
	acquire reader many times = fine, doesn't block
	acquire writer many times = blocks
	
	acquire reader & release reader many times = fine
	acquire writer & release writer many times  = untested
	acquire reader & acquire writer = blocks on 2
	acquire exclusive & acquire reader = bad, blocks on 2
	
	
		
	
	
	
	
Migration Log for QT:
	http://doc.qt.nokia.com/4.6/install-win.html

	qt-sdk-win-opensource-2010.04.exe
	Add C:\Program Files\Qt\2010.04\bin to path
	Run C:\Program Files\Qt\2010.04\qt\configure.exe from Visual Studio command prompt
	qt-vs-addin-1.1.5.exe

	New view project, change wchar_t native option
	Append to includes
	"$(SolutionDir)..\..\resources";"$(SolutionDir)..\..\resources\utilities-lib\include";"$(SolutionDir)..\..\resources\SFML\include"
			plus qtdir\includes\qt
	